This article discusses how TheFork, an online restaurant booking and discovery platform, manages Kubernetes cluster upgrades using the blue-green deployment strategy. Here's a summary of the key points in the article:

Kubernetes is a rapidly evolving platform, and keeping clusters up-to-date is essential. However, upgrading can be challenging due to compatibility issues and breaking changes.

Upgrade Paths:

Solution One: Traditional approach involves upgrading Amazon EKS and Istio versions step by step, following compatibility matrices. This can result in a high number of upgrades (49 in this case), making it time-consuming and risky.
Solution Two: The blue-green deployment strategy is proposed, where a new cluster with the target version is created, and applications are gradually migrated to it. This strategy reduces the number of upgrades and associated risks.
Blue-Green Deployment:

For non-breaking changes, a standard upgrade is performed.
For breaking changes, a new cluster is created with the latest versions of Amazon EKS and Istio. Applications are deployed, tested, and traffic is switched gradually. The old cluster is eventually shut down.
Clusters are named using a convention (e.g., spoon and knife) to differentiate them.
This strategy offers flexibility but is more time-consuming than standard upgrades.
Validation and Prerequisites:

Changelogs of Kubernetes and Istio versions are reviewed.
Tools like Kube-No-Trouble and istioctl are used to check compatibility.
Applications are updated as needed, with Helm charts being a common choice.
Cluster Creation and Bootstrap:

New clusters are created within the same Virtual Private Cloud (VPC).
Terraform is used for infrastructure management.
Istio is installed, and application deployment processes are updated to target both old and new clusters.
Traffic Switch.

The upgrade process is as follows:
Creation of the new cluster inside the same Virtual Private Cloud (VPC)
Bootstrap of cluster
Deploy Istio and validate its installation
Update our deployment process to deploy on both clusters, and redeploy all our applications deployed in the first deployment
Do the traffic switch

Amazon Application Load Balancer (ALB) and Target Groups are used to gradually switch traffic to the new cluster.
Auto scaling is employed to handle increased traffic on the new cluster.
Dealing with Statefulsets:

Statefulsets with backend storage (e.g., Amazon EBS) require a different migration approach.
Specific migration plans are developed for each statefulset, such as Elasticsearch.
Shard allocation is managed to ensure a smooth transition.
Conclusion:

The blue-green deployment strategy requires preparation, time, and patience but allows for efficient upgrades with minimal downtime.
While it incurs a higher initial cost compared to simple Kubernetes upgrades, it pays off in terms of reduced risk and improved confidence in future upgrades.
The article emphasizes the importance of documentation and planning in successful cluster upgrades.
