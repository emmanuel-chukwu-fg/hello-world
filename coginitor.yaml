AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for AWS Cognito User Pool

Resources:
  # Create an SNS Topic for AWS Cognito User Pool
  rSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'AWS Cognito User Pool SMS'
      TopicName: MyUserPool-SNS

  # Create an IAM role for Cognito to assume
  rSNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"

  # Create the AWS Cognito User Pool
  rUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "MyUserPool-${AWS::Region}"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Hello {username}, Your temporary password is {####}. Please sign in using this temporary password and reset your password immediately.'
          EmailSubject: 'Your temporary password for {PoolName}'
          SMSMessage: 'Hello {username}, Your temporary password is {####}. Please sign in using this temporary password and reset your password immediately.'
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Please click the link below to verify your email address: {####}'
      EmailVerificationSubject: 'Verify your email address'
      MfaConfiguration: OPTIONAL
      SmsConfiguration:
        ExternalId: MyUserPool
        SnsCallerArn: !GetAtt rSNSRole.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: given_name
          Required: false
        - AttributeDataType: String
          Name: family_name
          Required: false

  # Create AWS Cognito User Pool Client
  rUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "MyUserPoolClient-${AWS::Region}"
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: false
      UserPoolId: !Ref rUserPool  # Reference the User Pool ID
      CallbackURLs:
        - http://localhost:3000
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

Outputs:
  rUserPoolId:
    Value: !Ref rUserPool
    Description: User Pool ID of the AWS Cognito User Pool
  rSNSTopicArn:
    Value: !Ref rSNSTopic
    Description: ARN of the SNS Topic for SMS messages
  rSNSRoleArn:
    Value: !GetAtt rSNSRole.Arn
    Description: ARN of the IAM role for sending SMS messages via Amazon SNS
