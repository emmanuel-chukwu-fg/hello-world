Step 1: Initial Discovery : This step involves writing a bit about the app. Refer to other Apps for example.
Step 2: Verify App Location :  Check if the app is on Azure Repo.
Step 3: Create GitHub Repository (If on Azure Repo): If it's on Azure Repo, create a GitHub Repo for migration.
Step 4: Create GitHub Repository (If not on Azure Repo) : If not on Azure Repo, create a new GitHub Repo and upload your code.
Step 5: Transfer Code to GitHub : Migrate code from Azure Repo to GitHub.
Step 6: Disable Azure Repo
Step 7: Add the New App to GitHub Apps Folder : Organize the new app within the appropriate folder in GitHub Apps.
Step 8: Add the New App to the GitHub Repo (AppRepoName to be filled later) : - Integrate the app into the designated GitHub repository (fill in the repository name later).
Step 9: Create Dockerfile for Your App : Develop a Dockerfile for your app to enable containerization.
Step 10: Test Your App Locally : Verify the functionality of your app locally using the Docker container.
Step 11: Set up GitHub Actions Pipeline : Establish a GitHub Actions pipeline for automated testing and deployment.
Step 12: Add Kustomize Configs : Implement Kustomize configurations for managing Kubernetes deployments.
Step 13: Convert Secrets : Convert and securely manage any necessary secrets for your application.
Step 14: Build and Deploy to ArgoCD : Build your application and deploy it using ArgoCD for GitOps-style management.
Step 15: Deploy to Dev/Test : Deploy your application to the development or testing environment.
Step 16: Deploy to Production : Deploy your application to the production environment.
Step 17: Verify SSL Endpoints for Dev/Test/Prod : Ensure that SSL endpoints are correctly configured and functional for all environments (development, testing, production).
